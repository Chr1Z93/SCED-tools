---@diagnostic disable: undefined-global

-- Bundled by luabundle {"version":"1.6.0"}
local __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)
	local loadingPlaceholder = {[{}] = true}

	local register
	local modules = {}

	local require
	local loaded = {}

	register = function(name, body)
		if not modules[name] then
			modules[name] = body
		end
	end

	require = function(name)
		local loadedModule = loaded[name]

		if loadedModule then
			if loadedModule == loadingPlaceholder then
				return nil
			end
		else
			if not modules[name] then
				if not superRequire then
					local identifier = type(name) == 'string' and '\"' .. name .. '\"' or tostring(name)
					error('Tried to require ' .. identifier .. ', but no such module has been registered')
				else
					return superRequire(name)
				end
			end

			loaded[name] = loadingPlaceholder
			loadedModule = modules[name](require, loaded, register, modules)
			loaded[name] = loadedModule
		end

		return loadedModule
	end

	return require, loaded, register, modules
end)(nil)
__bundle_register("__root", function(require, _LOADED, __bundle_register, __bundle_modules)
require("<<TTS_FILE_NAME>>")
end)
__bundle_register("core/GUIDReferenceApi", function(require, _LOADED, __bundle_register, __bundle_modules)
do
  local GUIDReferenceApi = {}

  local function getGuidHandler()
    return getObjectFromGUID("123456")
  end

  -- Returns the matching object
  ---@param owner string Parent object for this search
  ---@param type string Type of object to search for
  ---@return any: Object reference to the matching object
  GUIDReferenceApi.getObjectByOwnerAndType = function(owner, type)
    return getGuidHandler().call("getObjectByOwnerAndType", { owner = owner, type = type })
  end

  -- Returns all matching objects as a table with references
  ---@param type string Type of object to search for
  ---@return table: List of object references to matching objects
  GUIDReferenceApi.getObjectsByType = function(type)
    return getGuidHandler().call("getObjectsByType", type)
  end

  -- Returns all matching objects as a table with references
  ---@param owner string Parent object for this search
  ---@return table: List of object references to matching objects
  GUIDReferenceApi.getObjectsByOwner = function(owner)
    return getGuidHandler().call("getObjectsByOwner", owner)
  end

  -- Sends new information to the reference handler to edit the main index (if type/guid are omitted, entry will be removed)
  ---@param owner string Parent of the object
  ---@param type? string Type of the object
  ---@param guid? string GUID of the object
  GUIDReferenceApi.editIndex = function(owner, type, guid)
    return getGuidHandler().call("editIndex", {
      owner = owner,
      type = type,
      guid = guid
    })
  end

  -- Returns the owner of an object or the object it's located on
  ---@param object tts__GameObject Object for this search
  ---@return string: Parent of the object or object it's located on
  GUIDReferenceApi.getOwnerOfObject = function(object)
    return getGuidHandler().call("getOwnerOfObject", object)
  end

  -- Remove object
  ---@param owner string Parent of the object
  ---@param type string Type of the object
  GUIDReferenceApi.removeObjectByOwnerAndType = function(owner, type)
    return getGuidHandler().call("removeObjectByOwnerAndType", {
      owner = owner,
      type = type
    })
  end

  return GUIDReferenceApi
end
end)
__bundle_register("<<TTS_FILE_NAME>>", function(require, _LOADED, __bundle_register, __bundle_modules)
--<<TTS_LUA_SCRIPT>>
end)
__bundle_register("playercards/customizable/UpgradeSheetLibrary", function(require, _LOADED, __bundle_register, __bundle_modules)
-- Common code for handling customizable card upgrade sheets
-- Define UI elements in the base card file, then include this
-- UI element definition is an array of tables, each with this structure. A row may include
-- checkboxes (number defined by count), a text field, both, or neither (if the row has custom
-- handling, as Living Ink does)
-- {
--   checkboxes = {
--     posZ = -0.71,
--     count = 1
--   },
--   textField = {
--     position =  { 0.005, 0.25, -0.58 },
--     width = 875
--   }
-- }
-- Fields should also be defined for xInitial (left edge of the checkboxes) and xOffset (amount to
-- shift X from one box to the next) as well as boxSize (checkboxes) and inputFontSize.
--
-- selectedUpgrades holds the state of checkboxes and text input, each element being:
-- selectedUpgrades[row] = { xp = #, text = "" }

local playermatApi                   = require("playermat/PlayermatApi")

-- Y position for UI elements
local Y_VISIBLE                      = 0.25

-- Variable to check whether UI finished loading
local isLoading                      = true

-- Used for Summoned Servitor and Living Ink
local VECTOR_COLOR                   = {
  unselected = { 0.5, 0.5, 0.5, 0.75 },
  mystic     = { 0.597, 0.195, 0.796 }
}

-- These match with ArkhamDB's way of storing the data in the dropdown menu
local SUMMONED_SERVITOR_SLOT_INDICES = { arcane = "1", ally = "0", none = "" }

-- Unicode Characters used for the checkboxes
local CHECKBOX_CHARS                 = { 10007, 10008 }

local selectedUpgrades               = {}

function updateSave()
  self.script_state = JSON.encode({ selections = selectedUpgrades })
end

-- Startup procedure
function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    if loadedData.selections ~= nil then
      selectedUpgrades = loadedData.selections
    end
  end

  selfId = getSelfId()
  math.randomseed(os.time())

  maybeLoadLivingInkSkills()
  xmlTable = {}
  createUi()
  maybeUpdateLivingInkSkillDisplay()
  maybeUpdateServitorSlotDisplay()

  self.addContextMenuItem("Clear Selections", function() resetSelections() end)
  self.addContextMenuItem("Scale: 1x", function() self.setScale({ 1, 1, 1 }) end)
  self.addContextMenuItem("Scale: 2x", function() self.setScale({ 2, 1, 2 }) end)
  self.addContextMenuItem("Scale: 3x", function() self.setScale({ 3, 1, 3 }) end)
end

-- Grabs the ID from the metadata for special functions (Living Ink, Summoned Servitor)
function getSelfId()
  local metadata = JSON.decode(self.getGMNotes()) or {}
  return metadata.id
end

function isUpgradeActive(row)
  return customizations[row] ~= nil
      and customizations[row].checkboxes ~= nil
      and customizations[row].checkboxes.count ~= nil
      and customizations[row].checkboxes.count > 0
      and selectedUpgrades[row] ~= nil
      and selectedUpgrades[row].xp ~= nil
      and selectedUpgrades[row].xp >= customizations[row].checkboxes.count
end

function resetSelections()
  selectedUpgrades = {}
  updateSave()
  updateDisplay()
end

function createUi()
  if customizations == nil then return end
  for i = 1, #customizations do
    if customizations[i].checkboxes ~= nil then
      createRowCheckboxes(i)
    end
    if customizations[i].textField ~= nil then
      createRowTextField(i)
    end
  end
  self.UI.setXmlTable(xmlTable)
  maybeMakeLivingInkSkillSelectionButtons()
  maybeMakeServitorSlotSelectionButtons()
  updateDisplay()
end

function createRowCheckboxes(rowIndex)
  local checkboxes = customizations[rowIndex].checkboxes

  for col = 1, checkboxes.count do
    -- set up click function
    local funcName = "checkboxRow" .. rowIndex .. "Col" .. col
    local func = function() clickCheckbox(rowIndex, col) end
    self.setVar(funcName, func)

    local cbPos = getCheckboxPosition(rowIndex, col)
    local checkboxXml = {
      tag = "Button",
      attributes = {
        onClick = funcName,
        position = cbPos,
        height = 75,
        width = 75,
        scale = "0.1 0.1 1",
        color = "#00000000"
      }
    }
    table.insert(xmlTable, checkboxXml)

    -- put a text element on top of the invisible buttons for the crosses
    local cbId = "cb_" .. rowIndex .. "_" .. col
    local cbData = getCheckboxData(cbId)
    local labelXml = {
      tag = "Text",
      attributes = {
        id = cbId,
        position = cbPos,
        rotation = "0 0 " .. cbData.angle,
        height = 165,
        width = 165,
        scale = "0.1 0.1 1",
        fontSize = cbData.size,
        text = cbData.symbol,
        textColor = "#000000FF"
      }
    }
    table.insert(xmlTable, labelXml)
  end
end

function getCheckboxPosition(row, col)
  return translatePosition(xInitial + col * xOffset, customizations[row].checkboxes.posZ)
end

-- gets randomized data for a checkbox
function getCheckboxData(cbId)
  -- nil handling
  checkboxData = checkboxData or {}

  -- generate data if not present
  if not checkboxData[cbId] then
    checkboxData[cbId] = {
      angle  = math.random(-12, 12) + 180,
      size   = round(math.random(85, 115) / 100 * 125, 0),
      symbol = string.char(CHECKBOX_CHARS[math.random(#CHECKBOX_CHARS)])
    }
  end
  return checkboxData[cbId]
end

function createRowTextField(rowIndex)
  local textField = customizations[rowIndex].textField
  local funcName = "textbox" .. rowIndex
  local func = function(_, value) clickTextbox(rowIndex, value) end
  self.setVar(funcName, func)

  local actualPosition = translatePosition(textField.position[1], textField.position[3])
  local newTextbox = {
    tag = "InputField",
    attributes = {
      onEndEdit = funcName,
      id = rowIndex,
      placeholder = "Click to type",
      position = actualPosition,
      alignment = "MiddleLeft",
      width = textField.width * 1.04,
      height = (inputFontsize + 20),
      fontSize = inputFontsize,
      resizeTextForBestFit = true,
      fontStyle = "Bold",
      rotation = "0 0 180",
      scale = "0.2 0.2 0.2",
      color = "#FFFFFF"
    }
  }
  table.insert(xmlTable, newTextbox)
end

function translatePosition(posX, posZ)
  -- position values are made strings to be usabled by the XML, height (z) is always -22
  local translatedPosX = tostring(posX * -100)
  local translatedPosY = tostring(posZ * 100)
  return translatedPosX .. " " .. translatedPosY .. " -40"
end

function updateDisplay()
  for i = 1, #customizations do
    updateRowDisplay(i)
  end
  maybeUpdateLivingInkSkillDisplay()
  maybeUpdateServitorSlotDisplay()
end

function updateRowDisplay(rowIndex)
  if customizations[rowIndex].checkboxes ~= nil then
    updateCheckboxes(rowIndex)
  end
  if customizations[rowIndex].textField ~= nil then
    updateTextField(rowIndex)
  end
end

function updateCheckboxes(rowIndex)
  local checkboxCount = customizations[rowIndex].checkboxes.count
  local selected = 0
  if selectedUpgrades[rowIndex] ~= nil and selectedUpgrades[rowIndex].xp ~= nil then
    selected = selectedUpgrades[rowIndex].xp
  end

  for col = 1, checkboxCount do
    waitForUILoad("cb_" .. rowIndex .. "_" .. col, "active", col <= selected)
  end
end

function updateTextField(rowIndex)
  if selectedUpgrades[rowIndex] ~= nil and selectedUpgrades[rowIndex].text ~= nil then
    waitForUILoad(rowIndex, "text", selectedUpgrades[rowIndex].text)
  end
end

function waitForUILoad(id, attribute, value)
  if isLoading then
    Wait.condition(
      function()
        Wait.frames(
          function()
            isLoading = false
            self.UI.setAttribute(id, attribute, value)
          end,
          1
        )
      end,
      function() return not self.UI.loading end
    )
  else
    self.UI.setAttribute(id, attribute, value)
  end
end

function clickCheckbox(row, col)
  if selectedUpgrades[row] == nil then
    selectedUpgrades[row] = {}
    selectedUpgrades[row].xp = 0
  end
  if selectedUpgrades[row].xp == col then
    selectedUpgrades[row].xp = col - 1
  else
    selectedUpgrades[row].xp = col
  end
  updateCheckboxes(row)
  updateSave()
  playermatApi.syncAllCustomizableCards()
end

-- Updates saved value for given text box when it loses focus
function clickTextbox(rowIndex, value)
  if selectedUpgrades[rowIndex] == nil then
    selectedUpgrades[rowIndex] = {}
  end
  selectedUpgrades[rowIndex].text = value:gsub("^%s*(.-)%s*$", "%1")
  updateSave()
  -- Editing isn't actually done yet, and will block the update. Wait a frame so it's finished
  Wait.frames(function() updateRowDisplay(rowIndex) end, 1)
end

---------------------------------------------------------
-- Living Ink related functions
---------------------------------------------------------

-- Builds the list of boolean skill selections from the Row 1 text field
function maybeLoadLivingInkSkills()
  if selfId ~= "09079-c" then return end
  selectedSkills = {
    willpower = false,
    intellect = false,
    combat    = false,
    agility   = false
  }
  if selectedUpgrades[1] ~= nil and selectedUpgrades[1].text ~= nil then
    for skill in string.gmatch(selectedUpgrades[1].text, "([^,]+)") do
      selectedSkills[skill] = true
    end
  end
end

function clickSkill(skillname)
  selectedSkills[skillname] = not selectedSkills[skillname]
  maybeUpdateLivingInkSkillDisplay()
  updateSelectedLivingInkSkillText()
end

-- Creates the invisible buttons overlaying the skill icons
function maybeMakeLivingInkSkillSelectionButtons()
  if selfId ~= "09079-c" then return end

  local buttonData = {
    function_owner = self,
    position       = { y = 0.2 },
    height         = 130,
    width          = 130,
    color          = { 0, 0, 0, 0 }
  }

  for skillname, _ in pairs(selectedSkills) do
    local funcName = "clickSkill" .. skillname
    self.setVar(funcName, function() clickSkill(skillname) end)

    buttonData.click_function = funcName
    buttonData.position.x = -1 * SKILL_ICON_POSITIONS[skillname].x
    buttonData.position.z = SKILL_ICON_POSITIONS[skillname].z
    self.createButton(buttonData)
  end
end

-- Builds a comma-delimited string of skills and places it in the Row 1 text field
function updateSelectedLivingInkSkillText()
  local skillString = ""
  if selectedSkills.willpower then
    skillString = skillString .. "willpower" .. ","
  end
  if selectedSkills.intellect then
    skillString = skillString .. "intellect" .. ","
  end
  if selectedSkills.combat then
    skillString = skillString .. "combat" .. ","
  end
  if selectedSkills.agility then
    skillString = skillString .. "agility" .. ","
  end
  if selectedUpgrades[1] == nil then
    selectedUpgrades[1] = {}
  end
  selectedUpgrades[1].text = skillString
  updateSave()
end

-- Refresh the vector circles indicating a skill is selected. Since we can only have one table of
-- vectors set, have to refresh all 4 at once
function maybeUpdateLivingInkSkillDisplay()
  if selfId ~= "09079-c" then return end
  local circles = {}
  for skill, isSelected in pairs(selectedSkills) do
    if isSelected then
      local circle = getCircleVector(SKILL_ICON_POSITIONS[skill])
      if circle ~= nil then
        table.insert(circles, circle)
      end
    end
  end
  self.setVectorLines(circles)
end

function getCircleVector(center)
  local diameter = Vector(0, 0, 0.1)
  local pointOfOrigin = Vector(center.x, Y_VISIBLE, center.z)
  local vec
  local vecList = {}
  local arcStep = 5
  for i = 0, 360, arcStep do
    diameter:rotateOver('y', arcStep)
    vec = pointOfOrigin + diameter
    vec.y = pointOfOrigin.y
    table.insert(vecList, vec)
  end

  return {
    points    = vecList,
    color     = VECTOR_COLOR.mystic,
    thickness = 0.02
  }
end

---------------------------------------------------------
-- Summoned Servitor related functions
---------------------------------------------------------

-- Creates the invisible buttons overlaying the slot words
function maybeMakeServitorSlotSelectionButtons()
  if selfId ~= "09080-c" then return end

  local buttonData = {
    click_function = "clickArcane",
    function_owner = self,
    position       = { x = -1 * SLOT_ICON_POSITIONS.arcane.x, y = 0.2, z = SLOT_ICON_POSITIONS.arcane.z },
    height         = 130,
    width          = 130,
    color          = { 0, 0, 0, 0 }
  }
  self.createButton(buttonData)

  buttonData.click_function = "clickAlly"
  buttonData.position.x = -1 * SLOT_ICON_POSITIONS.ally.x
  self.createButton(buttonData)
end

-- toggles the clicked slot
function clickArcane()
  if selectedUpgrades[6] == nil then
    selectedUpgrades[6] = {}
  end
  if selectedUpgrades[6].text == SUMMONED_SERVITOR_SLOT_INDICES.arcane then
    selectedUpgrades[6].text = SUMMONED_SERVITOR_SLOT_INDICES.none
  else
    selectedUpgrades[6].text = SUMMONED_SERVITOR_SLOT_INDICES.arcane
  end
  updateSave()
  maybeUpdateServitorSlotDisplay()
end

-- toggles the clicked slot
function clickAlly()
  if selectedUpgrades[6] == nil then
    selectedUpgrades[6] = {}
  end
  if selectedUpgrades[6].text == SUMMONED_SERVITOR_SLOT_INDICES.ally then
    selectedUpgrades[6].text = SUMMONED_SERVITOR_SLOT_INDICES.none
  else
    selectedUpgrades[6].text = SUMMONED_SERVITOR_SLOT_INDICES.ally
  end
  updateSave()
  maybeUpdateServitorSlotDisplay()
end

-- Refresh the vector circles indicating a slot is selected.
function maybeUpdateServitorSlotDisplay()
  if selfId ~= "09080-c" then return end

  local center         = SLOT_ICON_POSITIONS["arcane"]
  local arcaneVecList  = {
    Vector(center.x + 0.12, Y_VISIBLE, center.z + 0.05),
    Vector(center.x - 0.12, Y_VISIBLE, center.z + 0.05),
    Vector(center.x - 0.12, Y_VISIBLE, center.z - 0.05),
    Vector(center.x + 0.12, Y_VISIBLE, center.z - 0.05),
    Vector(center.x + 0.12, Y_VISIBLE, center.z + 0.05)
  }

  center               = SLOT_ICON_POSITIONS["ally"]
  local allyVecList    = {
    Vector(center.x + 0.07, Y_VISIBLE, center.z + 0.05),
    Vector(center.x - 0.07, Y_VISIBLE, center.z + 0.05),
    Vector(center.x - 0.07, Y_VISIBLE, center.z - 0.05),
    Vector(center.x + 0.07, Y_VISIBLE, center.z - 0.05),
    Vector(center.x + 0.07, Y_VISIBLE, center.z + 0.05)
  }

  local arcaneVecColor = VECTOR_COLOR.unselected
  local allyVecColor   = VECTOR_COLOR.unselected

  if selectedUpgrades[6] ~= nil and selectedUpgrades[6].text == SUMMONED_SERVITOR_SLOT_INDICES.arcane then
    arcaneVecColor = VECTOR_COLOR.mystic
  elseif selectedUpgrades[6] ~= nil and selectedUpgrades[6].text == SUMMONED_SERVITOR_SLOT_INDICES.ally then
    allyVecColor = VECTOR_COLOR.mystic
  end

  self.setVectorLines({
    {
      points    = arcaneVecList,
      color     = arcaneVecColor,
      thickness = 0.02
    },
    {
      points    = allyVecList,
      color     = allyVecColor,
      thickness = 0.02
    }
  })
end

-- Round number (num) to the Nth decimal (dec)
function round(num, dec)
  local mult = 10 ^ (dec or 0)
  return math.floor(num * mult + 0.5) / mult
end
end)
__bundle_register("playermat/PlayermatApi", function(require, _LOADED, __bundle_register, __bundle_modules)
do
  local PlayermatApi = {}
  local guidReferenceApi = require("core/GUIDReferenceApi")
  local searchLib = require("util/SearchLib")
  local localInvestigatorPosition = { x = -1.17, y = 1, z = -0.01 }

  -- Convenience function to look up a mat's object by color, or get all mats.
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@return table: Single-element if only single playermat is requested
  local function getMatForColor(matColor)
    if matColor == "All" then
      return guidReferenceApi.getObjectsByType("Playermat")
    else
      return { matColor = guidReferenceApi.getObjectByOwnerAndType(matColor, "Playermat") }
    end
  end

  -- Returns the color of the closest playermat
  ---@param startPos table Starting position to get the closest mat from
  PlayermatApi.getMatColorByPosition = function(startPos)
    local result, smallestDistance
    for matColor, mat in pairs(getMatForColor("All")) do
      local distance = Vector.between(startPos, mat.getPosition()):magnitude()
      if smallestDistance == nil or distance < smallestDistance then
        smallestDistance = distance
        result = matColor
      end
    end
    return result
  end

  -- Returns the color of the player's hand that is seated next to the playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  PlayermatApi.getPlayerColor = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.getVar("playerColor")
    end
  end

  -- Returns the color of the playermat that owns the playercolor's hand
  ---@param handColor string Color of the playermat
  PlayermatApi.getMatColor = function(handColor)
    for matColor, mat in pairs(getMatForColor("All")) do
      local playerColor = mat.getVar("playerColor")
      if playerColor == handColor then
        return matColor
      end
    end
    return nil
  end

  -- gets the slot data for the playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  PlayermatApi.getSlotData = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.getTable("slotData")
    end
  end

  -- sets the slot data for the playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  ---@param newSlotData table New slot data for the playermat
  PlayermatApi.loadSlotData = function(matColor, newSlotData)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.setTable("slotData", newSlotData)
      mat.call("updateSave")
      mat.call("updateSlotSymbols")
      return
    end
  end

  -- Performs a search of the deck area of the requested playermat and returns the result as table
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  PlayermatApi.getDeckAreaObjects = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("getDeckAreaObjects")
    end
  end

  -- Flips the top card of the deck (useful after deck manipulation for Norman Withers)
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  PlayermatApi.flipTopCardFromDeck = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("flipTopCardFromDeck")
    end
  end

  -- Returns the position of the discard pile of the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  PlayermatApi.getDiscardPosition = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("returnGlobalDiscardPosition")
    end
  end

  -- Returns the position of the draw pile of the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  PlayermatApi.getDrawPosition = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("returnGlobalDrawPosition")
    end
  end

  -- Transforms a local position into a global position
  ---@param localPos table Local position to be transformed
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  PlayermatApi.transformLocalPosition = function(localPos, matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.positionToWorld(localPos)
    end
  end

  -- Returns the rotation of the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  PlayermatApi.returnRotation = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.getRotation()
    end
  end

  -- Returns a table with spawn data (position and rotation) for a helper object
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param helperName string Name of the helper object
  PlayermatApi.getHelperSpawnData = function(matColor, helperName)
    local resultTable = {}
    local localPositionTable = {
      ["Hand Helper"] = Vector(-0.055, 0, -1.132),
      ["Search Assistant"] = Vector(-0.34, 0, -1.132)
    }

    for color, mat in pairs(getMatForColor(matColor)) do
      resultTable[color] = {
        position = mat.positionToWorld(localPositionTable[helperName]),
        rotation = mat.getRotation()
      }
    end
    return resultTable
  end


  -- Triggers the Upkeep for the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param playerColor string Color of the calling player (for messages)
  PlayermatApi.doUpkeepFromHotkey = function(matColor, playerColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("doUpkeepFromHotkey", playerColor)
    end
  end

  -- Handles discarding for the requested playermat for the provided list of objects
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  ---@param objList table List of objects to discard
  PlayermatApi.discardListOfObjects = function(matColor, objList)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("discardListOfObjects", objList)
    end
  end

  -- Gets data about the active investigator
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  PlayermatApi.getActiveInvestigatorData = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("getActiveInvestigatorData")
    end
  end

  -- Gets data about the active investigator
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param newData table New active investigator data (class and id)
  PlayermatApi.setActiveInvestigatorData = function(matColor, newData)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("setActiveInvestigatorData", newData)
    end
  end

  -- Returns the position for encounter card drawing
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  ---@param stack boolean If true, returns the leftmost position instead of the first empty from the right
  PlayermatApi.getEncounterCardDrawPosition = function(matColor, stack)
    for _, mat in pairs(getMatForColor(matColor)) do
      return Vector(mat.call("getEncounterCardDrawPosition", stack))
    end
  end

  -- Sets the requested playermat's snap points to limit snapping to matching card types or not.  If
  -- matchTypes is true, the main card slot snap points will only snap assets, while the
  -- investigator area point will only snap Investigators.  If matchTypes is false, snap points will
  -- be reset to snap all cards.
  ---@param matchCardTypes boolean Whether snap points should only snap for the matching card types
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  PlayermatApi.setLimitSnapsByType = function(matchCardTypes, matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("setLimitSnapsByType", matchCardTypes)
    end
  end

  -- Sets the requested playermat's draw 1 button to visible
  ---@param isDrawButtonVisible boolean Whether the draw 1 button should be visible or not
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  PlayermatApi.showDrawButton = function(isDrawButtonVisible, matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("showDrawButton", isDrawButtonVisible)
    end
  end

  -- Shows or hides the clickable clue counter for the requested playermat
  ---@param showCounter boolean Whether the clickable counter should be present or not
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  PlayermatApi.clickableClues = function(showCounter, matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("clickableClues", showCounter)
    end
  end

  -- Toggles the use of class textures for the requested playermat
  ---@param state boolean Whether the class texture should be used or not
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  PlayermatApi.useClassTexture = function(state, matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("useClassTexture", state)
    end
  end

  -- updates the texture of the playermat
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param overrideName? string Force a specific texture
  PlayermatApi.updateTexture = function(matColor, overrideName)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("updateTexture", overrideName)
    end
  end

  -- Removes all clues (to the trash for tokens and counters set to 0) for the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  PlayermatApi.removeClues = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("removeClues")
    end
  end

  -- Reports the clue count for the requested playermat
  ---@param useClickableCounters boolean Controls which type of counter is getting checked
  PlayermatApi.getClueCount = function(useClickableCounters, matColor)
    local count = 0
    for _, mat in pairs(getMatForColor(matColor)) do
      count = count + mat.call("getClueCount", useClickableCounters)
    end
    return count
  end

  -- Updates the specified owned counter
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param type string Counter to target
  ---@param newValue number Value to set the counter to
  ---@param modifier number If newValue is not provided, the existing value will be adjusted by this modifier
  PlayermatApi.updateCounter = function(matColor, type, newValue, modifier)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("updateCounter", { type = type, newValue = newValue, modifier = modifier })
    end
  end

  -- Triggers the draw function for the specified playermat
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param number number Amount of cards to draw
  PlayermatApi.drawCardsWithReshuffle = function(matColor, number)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("drawCardsWithReshuffle", number)
    end
  end

  -- Returns the resource counter amount
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  ---@param type string Counter to target
  PlayermatApi.getCounterValue = function(matColor, type)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("getCounterValue", type)
    end
  end

  -- Returns a list of mat colors that have an investigator placed
  PlayermatApi.getUsedMatColors = function()
    local usedColors = {}
    for matColor, mat in pairs(getMatForColor("All")) do
      local searchPos = mat.positionToWorld(localInvestigatorPosition)
      local searchResult = searchLib.atPosition(searchPos, "isCardOrDeck")
      if #searchResult > 0 then
        table.insert(usedColors, matColor)
      end
    end
    return usedColors
  end

  -- Returns a list of investigator card objects
  PlayermatApi.getUsedInvestigatorCards = function()
    local usedCards = {}
    for matColor, mat in pairs(getMatForColor("All")) do
      local searchPos = mat.positionToWorld(localInvestigatorPosition)
      local searchResult = searchLib.atPosition(searchPos, "isCardOrDeck")
      if #searchResult > 0 then
        usedCards[matColor] = searchResult[1]
      end
    end
    return usedCards
  end

  -- Returns investigator name
  ---@param matColor string Color of the playmat - White, Orange, Green or Red (does not support "All")
  PlayermatApi.getInvestigatorName = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      local searchPos = mat.positionToWorld(localInvestigatorPosition)
      local searchResult = searchLib.atPosition(searchPos, "isCardOrDeck")
      if #searchResult == 1 then
        return searchResult[1].getName()
      end
    end
    return ""
  end

  -- Resets the specified skill tracker to "1, 1, 1, 1"
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  PlayermatApi.resetSkillTracker = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("resetSkillTracker")
    end
  end

  -- Updates the XML for the slot symbols based on the slotData table
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  PlayermatApi.updateSlotSymbols = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("updateSlotSymbols")
    end
  end

  -- Finds all objects on the playermat and associated set aside zone and returns a table
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param filter? string Name of the filte function (see util/SearchLib)
  PlayermatApi.searchAroundPlayermat = function(matColor, filter)
    local objList = {}
    for _, mat in pairs(getMatForColor(matColor)) do
      for _, obj in ipairs(mat.call("searchAroundSelf", filter)) do
        table.insert(objList, obj)
      end
    end
    return objList
  end

  -- Discard a non-hidden card from the corresponding player's hand
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  PlayermatApi.doDiscardOne = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("doDiscardOne")
    end
  end

  -- Spawns the regular action tokens
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  PlayermatApi.spawnActionTokens = function(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("spawnActionTokens")
    end
  end

  -- Triggers the metadata sync for all playermats
  PlayermatApi.syncAllCustomizableCards = function()
    for _, mat in pairs(getMatForColor("All")) do
      mat.call("syncAllCustomizableCards")
    end
  end

  -- moves + rotates a playermat (and related objects)
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param position? table New position for the playermat
  ---@param rotationY? number New y-rotation for the playermat (X and Z will be 0)
  ---@param positionOffset? table Positional offset for the playermat
  PlayermatApi.moveAndRotate = function(matColor, position, rotationY, positionOffset)
    -- get mat and related objects
    local mat = guidReferenceApi.getObjectByOwnerAndType(matColor, "Playermat")
    if not mat then return end

    -- use current value if undefined
    local currentMatPos = mat.getPosition()
    local currentMatRotY = mat.getRotation().y
    position = position or mat.getPosition()
    rotationY = rotationY or mat.getRotation().y

    if positionOffset then
      position = Vector(position) + Vector(positionOffset)
    end

    local movedObjects = {}
    local function moveAndRotateObject(obj)
      local relativePos = obj.getPosition() - currentMatPos
      obj.setPosition(position + relativePos:rotateOver("y", rotationY - currentMatRotY))

      if obj.type == "Hand" then
        obj.setRotation({ 0, rotationY + 180, 0 })
      else
        local objRot = obj.getRotation()
        local relativeRotY = objRot.y - currentMatRotY
        obj.setRotation({ objRot.x, rotationY + relativeRotY, objRot.z })
      end

      movedObjects[obj.getGUID()] = true
    end

    -- get objects on the mat
    for _, obj in ipairs(searchLib.onObject(mat, "isInteractable")) do
      if not movedObjects[obj.getGUID()] then
        -- make sure object isn't owned by another mat
        local owner = guidReferenceApi.getOwnerOfObject(obj)
        if owner == "Mythos" or owner == matColor then
          moveAndRotateObject(obj)
        end
      end
    end

    -- move owned objects (including the mat)
    for _, obj in pairs(guidReferenceApi.getObjectsByOwner(matColor)) do
      if not movedObjects[obj.getGUID()] then
        moveAndRotateObject(obj)
      end
    end
  end

  return PlayermatApi
end
end)
__bundle_register("util/SearchLib", function(require, _LOADED, __bundle_register, __bundle_modules)
do
  local SearchLib = {}
  local filterFunctions = {
    isCard = function(x) return x.type == "Card" end,
    isDeck = function(x) return x.type == "Deck" end,
    isCardOrDeck = function(x) return x.type == "Card" or x.type == "Deck" end,
    isClue = function(x) return x.memo == "clueDoom" and x.is_face_down == false end,
    isDoom = function(x) return x.memo == "clueDoom" and x.is_face_down == true end,
    isInteractable = function(x) return x.interactable end,
    isTileOrToken = function(x) return not x.Book and (x.type == "Tile" or x.type == "Generic") end,
    isUniversalToken = function(x) return x.getMemo() == "universalActionAbility" end,
  }

  -- performs the actual search and returns a filtered list of object references
  ---@param pos tts__Vector Global position
  ---@param rot? tts__Vector Global rotation
  ---@param size table Size
  ---@param filter? string Name of the filter function
  ---@param direction? table Direction (positive is up)
  ---@param maxDistance? number Distance for the cast
  local function returnSearchResult(pos, rot, size, filter, direction, maxDistance)
    local filterFunc = filter and filterFunctions[filter]
    local searchResult = Physics.cast({
      origin       = pos,
      direction    = direction or { 0, 1, 0 },
      orientation  = rot or { 0, 0, 0 },
      type         = 3,
      size         = size,
      max_distance = maxDistance or 0
    })

    -- filter the result for matching objects
    local objList = {}
    for _, v in ipairs(searchResult) do
      if (not filter or filterFunc(v.hit_object)) then
        table.insert(objList, v.hit_object)
      end
    end
    return objList
  end

  -- searches the specified area
  function SearchLib.inArea(pos, rot, size, filter)
    return returnSearchResult(pos, rot, size, filter)
  end

  -- searches the area on an object
  function SearchLib.onObject(obj, filter, scale)
    scale = scale or 1
    local pos = obj.getPosition() + Vector(0, 1, 0) -- offset by half the cast's height
    local size = obj.getBounds().size:scale(scale):setAt("y", 2)
    return returnSearchResult(pos, _, size, filter)
  end

  -- searches the specified position (a single point)
  function SearchLib.atPosition(pos, filter)
    local size = { 0.1, 2, 0.1 }
    return returnSearchResult(pos, _, size, filter)
  end

  -- searches below the specified position (downwards until y = 0)
  function SearchLib.belowPosition(pos, filter)
    local size = { 0.1, 2, 0.1 }
    local direction = { 0, -1, 0 }
    local maxDistance = pos.y
    return returnSearchResult(pos, _, size, filter, direction, maxDistance)
  end

  return SearchLib
end
end)
return __bundle_require("__root")